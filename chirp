#! /usr/bin/env python
# Chirp - A simple command line twitter client.
#
# Copyright 2008, 2009 P.C. Shyamshankar <sykora@lucentbeing.com>
#
# This file is part of the chirp project.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from ConfigParser import ConfigParser
from optparse import OptionParser
from sys import argv, exit
from os.path import expanduser
from termcolor import colored

try :
    import twitter
except ImportError :
    print "You don't have the python-twitter library needed to use chirp."
    exit(1)

ACTIONS = set([
    'post',
    'list',
    'direct',
    'debug',
    'timeline',
])

DEFAULT_ACTION = 'timeline'

def parseOptions(argv) :
    '''Does command line parsing of options.'''
    parser = OptionParser()

    parser.add_option('-u', '--username',
                      action = 'store',
                      dest   = 'username')

    parser.add_option('-p', '--password',
                      action = 'store',
                      dest   = 'password')

    parser.add_option('-c', '--color',
                      action = 'store_true',
                      dest   = 'color')

    parser.add_option('-n', '--number',
                      type  =  'int',
                      action = 'store',
                      dest   = 'number')

    options, args = parser.parse_args(argv[1:])

    # Validation of actions.

    # No Action. Barring options, the action should be the first thing on the
    # line after 'chirp' or equivalent.

    try :
        options.action = args.pop(0)
    except IndexError :
        options.action = DEFAULT_ACTION

    # Invalid Action
    if options.action not in ACTIONS :
        print "Action must be one of : ", ACTIONS
        exit(1)

    # No target for 'list' and 'direct' actions.
    if options.action in set(['list', 'direct']) :
        try :
            options.target = args.pop(0)
        except IndexError :
            print "The 'list' and 'direct' actions require a target."
            exit(1)

    return options, args

def parseConfig() :
    # Defaults
    settings = {
        'color' : False,
    }

    parser = ConfigParser()
    parser.read(expanduser('~/.chirprc'))

    settings.update(dict((option, parser.get(section, option))
                    for section in parser.sections()
                    for option in parser.options(section)))

    return settings

def init_settings() :
    '''Returns : settings & args.
        settings - A dictionary with all config options. Options specifed on the
        command line override those set in the config file.

        args - Everything left on the command line after removing options and
        the main action.
    '''

    options, args = parseOptions(argv)
    settings = parseConfig()
    settings.update(filter(lambda (option, value) : value != None,
                           options.__dict__.items()))

    return settings, args

def main() :
    settings, args = init_settings()

    try :
        api = twitter.Api(settings['username'], settings['password'])
    except KeyError:
        print "You must specify a username and a password."
        exit(1)

    if settings['action'] == 'post' :
        if args :
            status = args[0]
        else :
            status = []
            print "Type your status update here (140 chars max)."
            print "Use EOF character (usually '^D') to stop."
            while True :
                try :
                    status.append(raw_input())
                except EOFError :
                    break

            status = '\n'.join(status)

        if len(status) > 140 :
            print "Message is too long, must be less than 140 characters."
            print "Current message is %d characters long." % len(status)
        else :
            api.PostUpdate(status)
            print "Posted update : %s" % status

    elif settings['action'] == 'list' :
        timeline = api.GetUserTimeline(user = settings['target'])
        for status in timeline :
            print colored(status.user.screen_name, 'blue'), "at", status.GetRelativeCreatedAt()
            print colored(status.GetText(), 'yellow')
    elif settings['action'] == 'timeline' :
        timeline = api.GetFriendsTimeline()
        for status in timeline :
            print colored(status.user.screen_name, 'blue'), colored(status.GetRelativeCreatedAt(), 'yellow')
            print status.GetText()

    elif settings['action'] == 'replies':
        replies = api.GetReplies()
        for status in replies:
            print status.user.screen_name, "-", status.GetText()
            print "\t- ", status.GetRelativeCreatedAt()

    elif settings['action'] == 'debug' :
        print settings, args

    return

if __name__ == '__main__' :
    main()
